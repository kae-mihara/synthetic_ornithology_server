{"mappings":"AAAA,MAAMA,MAAQC,EAAEC,IAAI,cAAcC,QAAQ,EAAC,UAAY,WAAa,GAE9DC,YACJ,0FAEIC,QACJ,gEACIC,MAAQL,EAAEM,UAAUF,QAAS,CAAED,YAAAA,cACrCE,MAAME,MAAMR,OAEZ,MAAMS,SAAWC,SAASC,eAAe,UACnCC,SAAWF,SAASC,eAAe,UACnCE,SAAWH,SAASC,eAAe,UACnCG,SAAWJ,SAASC,eAAe,UACzC,IAAII,OAAS,CAAC,CAACH,SAASI,MAAOF,SAASE,OAAS,CAACP,SAASO,MAAOH,SAASG,QACvEC,YAAchB,EAAEiB,UAAUH,OAAQ,CAACI,MAAO,UAAWC,OAAQ,IAEjE,SAASC,mBACPrB,MAAMsB,YAAYL,aAClBF,OAAS,CAAC,CAACN,SAASO,MAAOH,SAASG,OAAQ,CAACJ,SAASI,MAAOF,SAASE,QACtEC,YAAchB,EAAEiB,UAAUH,OAAQ,CAACI,MAAO,UAAWC,OAAQ,IAC7DpB,MAAMuB,SAASN,aAGjBR,SAASe,iBAAiB,UAAU,WAClCH,sBAGFT,SAASY,iBAAiB,UAAU,WAClCH,sBAGFR,SAASW,iBAAiB,UAAU,WAClCH,sBAGFP,SAASU,iBAAiB,UAAU,WAClCH,sBAKF,MAAMI,UAAYf,SAASC,eAAe,WACpCe,UAAYhB,SAASC,eAAe,WAC1C,IAAIgB,QACAC,QAEJH,UAAUD,iBAAiB,UAAU,WACnCG,QAASF,UAAUT,MACnBa,QAAQC,IAAI,aAAgBH,YAG9BD,UAAUF,iBAAiB,UAAU,WACnCI,QAAQF,UAAUV,MAClBa,QAAQC,IAAI,aAAeF,YAG7B,MAAMG,aAAerB,SAASC,eAAe,SACvCqB,WAAatB,SAASC,eAAe,OAO3C,SAASsB,oBAAqBC,GAE5B,IAAIC,EAAUJ,aAAaf,MAAMoB,UAC7BC,EAAUL,WAAWhB,MAAMoB,UAG/B,OAAOD,EAAUD,GAAaA,EAAYG,EAX5CN,aAAaO,KAAM,IAAIC,MAAOC,cAAcC,UAAU,EAAG,IACzDT,WAAWhB,OAAQ,IAAIuB,MAAOC,cAAcC,UAAU,EAAG,IACzDT,WAAWM,KAAM,IAAIC,MAAOC,cAAcC,UAAU,EAAG,IAYvDC,UACA,IAAIC,SAAWjC,SAASC,eAAe,YACjCiC,YAAclC,SAASC,eAAe,gBAE1C,SAASkC,kBAAkBC,EAAWC,EAAOC,EAASC,GACjDD,EAAU,MAEbL,SAASO,MAAMC,QAAU,QACzBP,YAAYM,MAAME,MAAQC,KAAKC,MAAMR,EAAUC,EAAM,KAAO,KAGzDD,IAAcC,IAEjBJ,SAASO,MAAMC,QAAU,QAI3B,IAAII,QAAUtD,EAAEuD,mBAAmB,CAAEC,gBAAgB,EAAMC,cAAeb,oBACxEc,WAAa,GAEjBC,eAAelB,UACb,IAAImB,EAAU,EACd,MAAMC,QAAiBC,MAAM,QACvBC,QAAaF,EAASG,OAG5B,IAAKC,QADLrC,QAAQC,IAAIqC,OAAOC,KAAKJ,GAAMK,QACjBL,GAAM,CACjBnC,QAAQC,IAAI,kBAAoB+B,EAAU,IAAMK,MAChDL,IACA,MAAMS,EAASrE,EAAEqE,OAAO,CAACJ,KAAKK,MAAMC,IAAKN,KAAKK,MAAME,MAAMjE,MAAMR,OAEhEsE,EAAOI,UAAU,YAAcR,KAAKS,KAAO,kBAAoBT,KAAKU,QAAQ,GAAGC,YAAc,cAAgBX,KAAKY,SAAW,sBAAwBZ,KAAKa,KAAKC,KAAO,8DAAiEd,KAAKe,UAAW,qCACvPtB,WAAWuB,KAAKZ,GAElBzC,QAAQC,IAAIkC,GACZT,QAAQ4B,UAAUxB,YAClByB,MAAM7D,SAASgC","sources":["public/logs.js"],"sourcesContent":["const mymap = L.map('checkinMap').setView([-24.801233, 132.945510], 5);\n\nconst attribution =\n  '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors';\n//const tileUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\nconst tileUrl =\n  'https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png';\nconst tiles = L.tileLayer(tileUrl, { attribution });\ntiles.addTo(mymap);\n\nconst latMinSL = document.getElementById(\"latMin\");\nconst latMaxSL = document.getElementById(\"latMax\");\nconst lonMinSL = document.getElementById(\"lonMin\");\nconst lonMaxSL = document.getElementById(\"lonMax\");\nvar bounds = [[latMaxSL.value, lonMaxSL.value] , [latMinSL.value, lonMinSL.value]];\nvar boundingBox = L.rectangle(bounds, {color: \"#ff7800\", weight: 1});\n\nfunction resetBoundingBox(){\n  mymap.removeLayer(boundingBox);\n  bounds = [[latMinSL.value, lonMinSL.value], [latMaxSL.value, lonMaxSL.value]];\n  boundingBox = L.rectangle(bounds, {color: \"#ff7800\", weight: 1});\n  mymap.addLayer(boundingBox);\n};\n\nlatMinSL.addEventListener(\"change\", function() {\n  resetBoundingBox();\n});\n\nlatMaxSL.addEventListener(\"change\", function() {\n  resetBoundingBox();\n});\n\nlonMinSL.addEventListener(\"change\", function() {\n  resetBoundingBox();\n});\n\nlonMaxSL.addEventListener(\"change\", function() {\n  resetBoundingBox();\n});\n\n\n\nconst minTempSL = document.getElementById(\"minTemp\");\nconst maxTempSL = document.getElementById(\"maxTemp\");\nvar minTemp;\nvar maxTemp;\n\nminTempSL.addEventListener(\"change\", function(){\n  minTemp= minTempSL.value;\n  console.log(\"Min temp: \" +  minTemp);\n});\n\nmaxTempSL.addEventListener(\"change\", function(){\n  maxTemp=maxTempSL.value;\n  console.log(\"Max temp: \" + maxTemp);\n});\n\nconst earliestDate = document.getElementById(\"start\");\nconst latestDate = document.getElementById(\"end\");\n\nearliestDate.max = new Date().toISOString().substring(0, 10);\nlatestDate.value = new Date().toISOString().substring(0, 10);\nlatestDate.max = new Date().toISOString().substring(0, 10);\n\n\nfunction isSampleInDateRange( dateStamp ) {\n  // format: mm.dd.yyyy;\n  var minDate = earliestDate.value.getTime();\n  var maxDate = latestDate.value.getTime();\n \n\n  return minDate < dateStamp && dateStamp < maxDate;\n};\n\ngetData();\nvar progress = document.getElementById('progress');\n\t\tvar progressBar = document.getElementById('progress-bar');\n\n\t\tfunction updateProgressBar(processed, total, elapsed, layersArray) {\n\t\t\tif (elapsed > 1000) {\n\t\t\t\t// if it takes more than a second to load, display the progress bar:\n\t\t\t\tprogress.style.display = 'block';\n\t\t\t\tprogressBar.style.width = Math.round(processed/total*100) + '%';\n\t\t\t}\n\n\t\t\tif (processed === total) {\n\t\t\t\t// all markers processed - hide the progress bar:\n\t\t\t\tprogress.style.display = 'none';\n\t\t\t}\n\t\t}\n\n\t\tvar markers = L.markerClusterGroup({ chunkedLoading: true, chunkProgress: updateProgressBar });\nvar markerList = [];\n\nasync function getData() {\n  var counter = 0;\n  const response = await fetch('/api');\n  const data = await response.json();\n  \n  console.log(Object.keys(data).length)\n  for (item of data) {\n    console.log(\"Getting data : \" + counter + \" \" + item);\n    counter ++;\n    const marker = L.marker([item.coord.lat, item.coord.lon]).addTo(mymap);\n\n    marker.bindPopup(\"Location:\" + item.name + \"<br/> Weather :\" + item.weather[0].description + \"<br/> Date:\" + item.dateName + \"<br/> Temperature :\" + item.main.temp + \"&deg; C.<br/><br/><audio controls><source src=\\\"/audiofiles/\" + item.timeStamp +\".wav\\\"> type=\\\"audio/wave\\\" </audio>\" )\n    markerList.push(marker);\n  }\n  console.log(data);\n  markers.addLayers(markerList);\n\t\tmyMap.addLayer(markers);\n};\n\n\n"],"names":["mymap","L","map","setView","attribution","tileUrl","tiles","tileLayer","addTo","latMinSL","document","getElementById","latMaxSL","lonMinSL","lonMaxSL","bounds","value","boundingBox","rectangle","color","weight","resetBoundingBox","removeLayer","addLayer","addEventListener","minTempSL","maxTempSL","minTemp","maxTemp","console","log","earliestDate","latestDate","isSampleInDateRange","dateStamp","minDate","getTime","maxDate","max","Date","toISOString","substring","getData","progress","progressBar","updateProgressBar","processed","total","elapsed","layersArray","style","display","width","Math","round","markers","markerClusterGroup","chunkedLoading","chunkProgress","markerList","async","counter","response","fetch","data","json","item","Object","keys","length","marker","coord","lat","lon","bindPopup","name","weather","description","dateName","main","temp","timeStamp","push","addLayers","myMap"],"version":3,"file":"index.ad49d4c2.js.map"}