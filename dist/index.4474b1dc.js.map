{"mappings":"AAAA,MAAMA,MAAQC,EAAEC,IAAI,cAAcC,QAAQ,EAAC,UAAY,WAAa,GAE9DC,YACJ,0FAEIC,QACJ,gEACIC,MAAQL,EAAEM,UAAUF,QAAS,CAAED,YAAAA,cACrCE,MAAME,MAAMR,OAEZ,MAAMS,SAAWC,SAASC,eAAe,UACnCC,SAAWF,SAASC,eAAe,UACnCE,SAAWH,SAASC,eAAe,UACnCG,SAAWJ,SAASC,eAAe,UACzC,IAAII,OAAS,CAAC,CAACH,SAASI,MAAOF,SAASE,OAAS,CAACP,SAASO,MAAOH,SAASG,QACvEC,YAAchB,EAAEiB,UAAUH,OAAQ,CAACI,MAAO,UAAWC,OAAQ,IAmBjE,SAASC,IACPrB,MAAMsB,YAAYL,aAClBF,OAAS,CAAC,CAACN,SAASO,MAAOH,SAASG,OAAQ,CAACJ,SAASI,MAAOF,SAASE,QACtEC,YAAchB,EAAEiB,UAAUH,OAAQ,CAACI,MAAO,UAAWC,OAAQ,IAC7DpB,MAAMuB,SAASN,aApBjBR,SAASe,iBAAiB,UAAU,WAClCC,sBAGFb,SAASY,iBAAiB,UAAU,WAClCC,sBAGFZ,SAASW,iBAAiB,UAAU,WAClCC,sBAGFX,SAASU,iBAAiB,UAAU,WAClCC,sBAUF,MAAMC,UAAYhB,SAASC,eAAe,WACpCgB,UAAYjB,SAASC,eAAe,WAC1C,IAAIiB,QACAC,QAEJH,UAAUF,iBAAiB,UAAU,WACnCI,QAASF,UAAUV,MACnBc,QAAQC,IAAI,aAAgBH,YAG9BD,UAAUH,iBAAiB,UAAU,WACnCK,QAAQF,UAAUX,MAClBc,QAAQC,IAAI,aAAeF,YAG7B,MAAMG,aAAetB,SAASC,eAAe,SACvCsB,WAAavB,SAASC,eAAe,OAO3C,SAASuB,oBAAqBC,GAE5B,IAAIC,EAAUJ,aAAahB,MAAMqB,UAC7BC,EAAUL,WAAWjB,MAAMqB,UAG/B,OAAOD,EAAUD,GAAaA,EAAYG,EAK5CC,eAAeC,UACb,MAAMC,QAAiBC,MAAM,QACvBC,QAAaF,EAASG,OAE5B,IAAKC,QAAQF,EAAM,CACjB,MAAMG,EAAS7C,EAAE6C,OAAO,CAACD,KAAKE,MAAMC,IAAKH,KAAKE,MAAME,MAAMzC,MAAMR,OAC/B6C,KAAKK,KAAWL,KAAKM,QAAQC,YAC3CP,KAAKQ,KAAKC,KAK7BR,EAAOS,UAAU,YAAcV,KAAKK,KAAO,kBAAoBL,KAAKM,QAAQ,GAAGC,YAAc,cAAgBP,KAAKW,SAAW,sBAAwBX,KAAKQ,KAAKC,KAAO,8DAAiET,KAAKY,UAAW,qCAEzP3B,QAAQC,IAAIY,GA9BdX,aAAa0B,KAAM,IAAIC,MAAOC,cAAcC,UAAU,EAAG,IACzD5B,WAAWjB,OAAQ,IAAI2C,MAAOC,cAAcC,UAAU,EAAG,IACzD5B,WAAWyB,KAAM,IAAIC,MAAOC,cAAcC,UAAU,EAAG,IAYvDrB","sources":["public/logs.js"],"sourcesContent":["const mymap = L.map('checkinMap').setView([-24.801233, 132.945510], 5);\n\nconst attribution =\n  '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors';\n//const tileUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\nconst tileUrl =\n  'https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png';\nconst tiles = L.tileLayer(tileUrl, { attribution });\ntiles.addTo(mymap);\n\nconst latMinSL = document.getElementById(\"latMin\");\nconst latMaxSL = document.getElementById(\"latMax\");\nconst lonMinSL = document.getElementById(\"lonMin\");\nconst lonMaxSL = document.getElementById(\"lonMax\");\nvar bounds = [[latMaxSL.value, lonMaxSL.value] , [latMinSL.value, lonMinSL.value]];\nvar boundingBox = L.rectangle(bounds, {color: \"#ff7800\", weight: 1});\n\n\nlatMinSL.addEventListener(\"change\", function() {\n  resetBoudningBox();\n})\n\nlatMaxSL.addEventListener(\"change\", function() {\n  resetBoudningBox();\n});\n\nlonMinSL.addEventListener(\"change\", function() {\n  resetBoudningBox();\n})\n\nlonMaxSL.addEventListener(\"change\", function() {\n  resetBoudningBox();\n});\n\nfunction w(){\n  mymap.removeLayer(boundingBox);\n  bounds = [[latMinSL.value, lonMinSL.value], [latMaxSL.value, lonMaxSL.value]];\n  boundingBox = L.rectangle(bounds, {color: \"#ff7800\", weight: 1});\n  mymap.addLayer(boundingBox);\n}\n\nconst minTempSL = document.getElementById(\"minTemp\");\nconst maxTempSL = document.getElementById(\"maxTemp\");\nvar minTemp;\nvar maxTemp;\n\nminTempSL.addEventListener(\"change\", function(){\n  minTemp= minTempSL.value;\n  console.log(\"Min temp: \" +  minTemp);\n})\n\nmaxTempSL.addEventListener(\"change\", function(){\n  maxTemp=maxTempSL.value;\n  console.log(\"Max temp: \" + maxTemp);\n})\n\nconst earliestDate = document.getElementById(\"start\");\nconst latestDate = document.getElementById(\"end\");\n\nearliestDate.max = new Date().toISOString().substring(0, 10);\nlatestDate.value = new Date().toISOString().substring(0, 10);\nlatestDate.max = new Date().toISOString().substring(0, 10);\n\n\nfunction isSampleInDateRange( dateStamp ) {\n  // format: mm.dd.yyyy;\n  var minDate = earliestDate.value.getTime();\n  var maxDate = latestDate.value.getTime();\n \n\n  return minDate < dateStamp && dateStamp < maxDate;\n}\n\ngetData();\n\nasync function getData() {\n  const response = await fetch('/api');\n  const data = await response.json();\n\n  for (item of data) {\n    const marker = L.marker([item.coord.lat, item.coord.lon]).addTo(mymap);\n    let txt = `The weather here at ${item.name} is ${item.weather.description} with\n    a temperature of ${item.main.temp}&deg; C.`;\n\n   \n   // marker.bindPopup(txt);\n\n    marker.bindPopup(\"Location:\" + item.name + \"<br/> Weather :\" + item.weather[0].description + \"<br/> Date:\" + item.dateName + \"<br/> Temperature :\" + item.main.temp + \"&deg; C.<br/><br/><audio controls><source src=\\\"/audiofiles/\" + item.timeStamp +\".wav\\\"> type=\\\"audio/wave\\\" </audio>\" )\n  }\n  console.log(data);\n}\n\n\n"],"names":["mymap","L","map","setView","attribution","tileUrl","tiles","tileLayer","addTo","latMinSL","document","getElementById","latMaxSL","lonMinSL","lonMaxSL","bounds","value","boundingBox","rectangle","color","weight","w","removeLayer","addLayer","addEventListener","resetBoudningBox","minTempSL","maxTempSL","minTemp","maxTemp","console","log","earliestDate","latestDate","isSampleInDateRange","dateStamp","minDate","getTime","maxDate","async","getData","response","fetch","data","json","item","marker","coord","lat","lon","name","weather","description","main","temp","bindPopup","dateName","timeStamp","max","Date","toISOString","substring"],"version":3,"file":"index.4474b1dc.js.map"}